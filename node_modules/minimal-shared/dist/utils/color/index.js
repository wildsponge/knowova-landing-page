function a(r){if(!r)throw new Error("Hex color is undefined!");if(!/^#[0-9A-F]{6}$/i.test(r))throw new Error(`Invalid hex color: ${r}`);let e=parseInt(r.substring(1,3),16),s=parseInt(r.substring(3,5),16),n=parseInt(r.substring(5,7),16);return`${e} ${s} ${n}`}function u(r){let e={};return Object.entries(r).forEach(([s,n])=>{n&&(e[`${s}Channel`]=a(n))}),{...r,...e}}function o(r,e){let s=t=>t.includes("var(--"),n=t=>t.trim().endsWith("%"),i={invalid:`[Alpha]: Invalid opacity "${r}" for ${e}.`,range:"Must be a number between 0 and 1 (e.g., 0.48).",format:'Must be a percentage (e.g., "48%") or CSS variable (e.g., "var(--opacity)").'};if(typeof r=="string"){if(n(r))return r;if(s(r))return`calc(${r} * 100%)`;let t=parseFloat(r.trim());if(!isNaN(t)&&t>=0&&t<=1)return`${Number((t*100).toFixed(2))}%`;throw new Error(`${i.invalid} ${i.format}`)}if(typeof r=="number"){if(r>=0&&r<=1)return`${Number((r*100).toFixed(2))}%`;throw new Error(`${i.invalid} ${i.range}`)}throw new Error(`${i.invalid}`)}function g(r,e=1){if(!r?.trim())throw new Error("[Alpha]: Color is undefined or empty!");if(r.startsWith("#")||r.startsWith("rgb")||r.startsWith("rgba")||!r.includes("var")&&r.includes("Channel"))throw new Error([`[Alpha]: Unsupported color format "${r}"`,"\u2705 Supported formats:",'- RGB channels: "0 184 217"','- CSS variables with "Channel" prefix: "var(--palette-common-blackChannel, #000000)"',"\u274C Unsupported formats:",'- Hex: "#00B8D9"','- RGB: "rgb(0, 184, 217)"','- RGBA: "rgba(0, 184, 217, 1)"'].join(`
`));let n=o(e,r);return r.toLowerCase()==="currentcolor"?`color-mix(in srgb, currentColor ${n}, transparent)`:`rgba(${r} / ${n})`}export{u as createPaletteChannel,a as hexToRgbChannel,g as varAlpha};
