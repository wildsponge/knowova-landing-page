function a(n){if(!n)throw new Error("Hex color is undefined!");if(!/^#[0-9A-F]{6}$/i.test(n))throw new Error(`Invalid hex color: ${n}`);let e=parseInt(n.substring(1,3),16),s=parseInt(n.substring(3,5),16),r=parseInt(n.substring(5,7),16);return`${e} ${s} ${r}`}function u(n){let e={};return Object.entries(n).forEach(([s,r])=>{r&&(e[`${s}Channel`]=a(r))}),{...n,...e}}function o(n,e){let s=t=>t.includes("var(--"),r=t=>t.trim().endsWith("%"),i={invalid:`[Alpha]: Invalid opacity "${n}" for ${e}.`,range:"Must be a number between 0 and 1 (e.g., 0.48).",format:'Must be a percentage (e.g., "48%") or CSS variable (e.g., "var(--opacity)").'};if(typeof n=="string"){if(r(n))return n;if(s(n))return`calc(${n} * 100%)`;let t=parseFloat(n.trim());if(!isNaN(t)&&t>=0&&t<=1)return`${Number((t*100).toFixed(2))}%`;throw new Error(`${i.invalid} ${i.format}`)}if(typeof n=="number"){if(n>=0&&n<=1)return`${Number((n*100).toFixed(2))}%`;throw new Error(`${i.invalid} ${i.range}`)}throw new Error(`${i.invalid}`)}function g(n,e=1){if(!n?.trim())throw new Error("[Alpha]: Color is undefined or empty!");if(n.startsWith("#")||n.startsWith("rgb")||n.startsWith("rgba")||!n.includes("var")&&n.includes("Channel"))throw new Error([`[Alpha]: Unsupported color format "${n}"`,"\u2705 Supported formats:",'- RGB channels: "0 184 217"','- CSS variables with "Channel" prefix: "var(--palette-common-blackChannel, #000000)"',"\u274C Unsupported formats:",'- Hex: "#00B8D9"','- RGB: "rgb(0, 184, 217)"','- RGBA: "rgba(0, 184, 217, 1)"'].join(`
`));let r=o(e,n);return n.toLowerCase()==="currentcolor"?`color-mix(in srgb, currentColor ${r}, transparent)`:`rgba(${n} / ${r})`}export{u as createPaletteChannel,a as hexToRgbChannel,g as varAlpha};
