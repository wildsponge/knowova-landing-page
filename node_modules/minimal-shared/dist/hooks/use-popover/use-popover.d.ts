import { MouseEvent, Dispatch, SetStateAction } from 'react';

/**
 * Custom hook to manage the state of a popover.
 *
 * @returns {UsePopoverReturn<T>} - An object containing:
 * - `open`: A boolean indicating whether the popover is open.
 * - `anchorEl`: The current element that the popover is anchored to.
 * - `onClose`: A function to close the popover.
 * - `onOpen`: A function to open the popover.
 * - `setAnchorEl`: A function to manually set the anchor element.
 *
 * @example
 * const { open, anchorEl, onOpen, onClose } = usePopover<HTMLButtonElement>();
 *
 * return (
 *   <>
 *     <button variant="contained" onClick={onOpen}>Click me</button>
 *
 *     <Popover open={open} onClose={onClose} anchorEl={anchorEl}>
 *        Popover content
 *      </Popover>
 *   </>
 * );
 */
type UsePopoverReturn<T extends HTMLElement = HTMLElement> = {
    open: boolean;
    anchorEl: T | null;
    onClose: () => void;
    onOpen: (event: MouseEvent<T>) => void;
    setAnchorEl: Dispatch<SetStateAction<T | null>>;
};
declare function usePopover<T extends HTMLElement = HTMLElement>(): UsePopoverReturn<T>;

export { type UsePopoverReturn, usePopover };
