import { Dispatch, SetStateAction } from 'react';

/**
 * Custom hook to manage the visibility of a "Back to Top" button based on scroll position.
 *
 * @param {string | number} defaultValue - The scroll progress percentage (e.g., '90%') or distance in pixels (e.g., 80) at which the button becomes visible.
 * - If `defaultValue` is a percentage string (e.g., '90%'), the button becomes visible when the scroll distance is that percentage from the top.
 * - If `defaultValue` is a number (e.g., 80), the button becomes visible when the scroll distance is that many pixels from the bottom.
 * @param {boolean} [isDebounce=false] - Whether to debounce the scroll handler to improve performance.
 *
 * @returns {UseBackToTopReturn} - An object containing:
 * - `isVisible`: A boolean indicating whether the "Back to Top" button should be visible.
 * - `onBackToTop`: A function to scroll the window back to the top smoothly.
 * - `setIsVisible`: A function to manually set the visibility of the "Back to Top" button.
 *
 * @example
 * const { isVisible, onBackToTop } = useBackToTop('90%');
 * const { isVisible, onBackToTop } = useBackToTop(80);
 *
 * return (
 *   <button onClick={onBackToTop} style={{ display: isVisible ? 'block' : 'none' }}>
 *     Back to Top
 *   </button>
 * );
 */
type UseBackToTopReturn = {
    isVisible: boolean;
    onBackToTop: () => void;
    setIsVisible: Dispatch<SetStateAction<boolean>>;
};
declare function useBackToTop(defaultValue: string | number, isDebounce?: boolean): UseBackToTopReturn;

export { type UseBackToTopReturn, useBackToTop };
