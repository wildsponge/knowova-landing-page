import { Dispatch, SetStateAction } from 'react';

/**
 * Custom hook to create a countdown timer in seconds.
 *
 * @param {number} defaultValue - The initial countdown value in seconds.
 *
 * @returns {UseCountdownSecondsReturn} - An object containing:
 * - `value`: The current countdown value in seconds.
 * - `start`: A function to start the countdown.
 * - `reset`: A function to reset the countdown to the initial value.
 * - `isCounting`: A boolean indicating whether the countdown is currently active.
 * - `setValue`: A function to manually set the countdown value.
 *
 * @example
 * const { value, start, reset, isCounting } = useCountdownSeconds(30);
 *
 * return (
 *   <div>
 *     <p>Countdown: {value} seconds</p>
 *     <button onClick={start} disabled={isCounting}>Start</button>
 *     <button onClick={reset}>Reset</button>
 *   </div>
 * );
 */
type UseCountdownSecondsReturn = {
    value: number;
    start: () => void;
    reset: () => void;
    isCounting: boolean;
    setValue: Dispatch<SetStateAction<number>>;
};
declare function useCountdownSeconds(defaultValue: number): UseCountdownSecondsReturn;

export { type UseCountdownSecondsReturn, useCountdownSeconds };
